# this overrides the default git:create_release in order to run submodules
#namespace :git do
#  desc "Copy repo to releases"
#  task create_release: :"git:update" do
#    on roles(:all) do
#      with fetch(:git_environmental_variables) do
#        within repo_path do
#          execute :git, :clone, "-b", fetch(:branch),
#                  "--recursive --depth 1 .", release_path
#        end
#      end
#    end
#  end
#end

namespace :deploy do
  before :starting, :confirm do
    next unless fetch(:stage) == :production
    puts <<-EOF

************************** WARNING ***************************
            You are about to deploy to production
**************************************************************

    EOF
    ask :answer, "Are you sure the current version is correct, " \
                 "and you want to update wikirate.org? " \
                 'Type "forgive me, Yoda"'
    exit unless fetch(:answer) == "forgive me, Yoda"
    # invoke "backup:create"
  end

  after :updated, :migrate do
    #because this creates the log and tmp files, it needs to be executed before the chown,
    # which in turn needs to happen before the restart.  not ideal.
    on roles(:web), in: :groups, limit: 3, wait: 10 do
      # Here we can do anything such as:
      within release_path do
        # execute :mkdir, "tmp"
        execute :mkdir, "log"
        execute :rake, "decko:migrate"
      end
    end
  end

  desc "Set www-data permissions on config.ru / log"
  after :updated, :deploy_chown do
    on roles(:app) do
      execute :sudo, "/opt/bin/deploy_chown", release_path
    end
  end

  desc "clear cache"
  after :published, :clear_cache do
    on roles(:app) do
      within release_path do
        execute :rake, "decko:reset_cache"
      end
    end
  end

  desc "regenerate all stuff create by machine cards (like css and javascript)"
  after :clear_cache, :reset_machine_output do
    # invoke "maintenance:enable"
    on roles(:app) do
      within release_path do
        execute :rake, "card:refresh_machine_output"
      end
    end
    # invoke "maintenance:disable"
  end

  desc "stop old delayed job processes"
  before :starting, :stop_delayed_jobs do
    invoke "delayed_job:stop"
  end

  desc "start delayed job processes"
  after :published, :start_delayed_jobs do
    invoke "delayed_job:start"
  end

  after :finishing, :cleanup do
    next unless fetch(:stage) == :production
    puts "Don't forget to release the new version `rake wikirate:release` " \
         "and add release notes"
  end

  after :cleanup, :deploy_pt_stories do
    pt_config_file = File.expand_path("../../../../config/pivotaltracker.yml", __FILE__)
    next if fetch(:stage) != :staging || !File.exists?(pt_config_file)

    require 'pivotal-tracker'
    tracker = YAML.load_file pt_config_file
    %i[token project_id].each do |n|
      raise "#{n} not set in pivotaltracker.yml" unless tracker[n]
    end

    PivotalTracker::Client.token = tracker[:token]
    PivotalTracker::Client.use_ssl = true

    unpakt_project = PivotalTracker::Project.find(tracker[:project_id])
    stories =
      unpakt_project.stories.all(:state => "finished", :story_type => ['bug', 'feature'])

    staging_deploy_tag = `git tag | grep staging | tail -n1`

    stories.each do | story |
      puts "Searching for #{story.id} in local git repo."
      search_result = `git log --grep #{story.id} #{staging_deploy_tag}`
      if search_result.length > 0
        puts "Found #{story.id}, marking as delivered."
        story.notes.create(:text => "Delivered by staging deploy script.")
        story.update({"current_state" => "delivered"})
      else
        puts "Coult not find #{story.id} in git repo."
      end
    end
  end

  # after :cleanup, :disable_maintenance_page do
  #  puts "waiting for machine stuff to regenerate"
  #  sleep 30
  #  invoke "maintenance:disable"
  # end
end
